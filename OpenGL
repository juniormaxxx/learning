#include<GL/glew.h>
#include<GLFW/glfw3.h>
#include<iostream>

unsigned int CompileShader(/*GLunit*/unsigned int type, std::string source)                     // GLuint je isto Å¡to i unsigned int
{
	unsigned int id = glCreateShader(type);
	const char* collection = source.c_str();
	glShaderSource(id, 1, &collection, nullptr);
	glCompileShader(id);
	return id;
}

unsigned int CreateShader(std::string& vertexShader, std::string& pixelShader)
{
	unsigned int program = glCreateProgram();
	unsigned int vxShader = CompileShader(GL_VERTEX_SHADER, vertexShader);
	unsigned int pxShader = CompileShader(GL_FRAGMENT_SHADER, pixelShader);

	glAttachShader(program, vxShader);
	glAttachShader(program, pxShader);
	glLinkProgram(program);
	glValidateProgram(program);

	glDeleteShader(vxShader);
	glDeleteShader(pxShader);

	return program;
}

int main(void)
{
	GLFWwindow* window;

	/* Initialize the library */
	if (!glfwInit())
		return -1;
   

	/* Create a windowed mode window and its OpenGL context */
	window = glfwCreateWindow(640, 480, "My first window !", NULL, NULL);
	if (!window)
	{
		glfwTerminate();
		return -1;
	}

	/* Make the window's context current */
	glfwMakeContextCurrent(window);

	if (glewInit() != GLEW_OK)
	{
		std::cout << "Error in context!" << std::endl;
	}

	std::cout << glGetString(GL_VERSION) << std::endl;

	
	float positions[6] =
	{
		0.5, 0.5,
		- 0.5, 0.5,
		- 0.5, -0.5
	};
	unsigned int buffer;
	glGenBuffers(1, &buffer);
	glBindBuffer(GL_ARRAY_BUFFER, buffer);
	glBufferData(GL_ARRAY_BUFFER, 6*sizeof(float), positions, GL_STATIC_DRAW );

	glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(float)*2, 0);
	glEnableVertexAttribArray(0);

	std::string vertexShader = 
		"#version 330 core\n" 
		"\n "
		"layout(location = 0) in vec4 position;\n"
		"void main()\n"
		"{\n"
		"gl_Position = position;\n"
		"}\n"
		;
	std::string pixelShader =
		"#version 330 core\n"
		"\n "
		"layout(location = 0) out vec4 color;\n"
		"void main()\n"
		"{\n"
		"color = vec4(0.4, 0.0, 0.8, 1.0);\n"      // 1.kanal crvena, 2.kanal zelena,3.kanal plava,4.kanal Alpha.(alpha vidljivost) 
		"}\n"
		;

	unsigned int shader = CreateShader(vertexShader, pixelShader);
	glUseProgram(shader);

	/* Loop until the user closes the window */
	while (!glfwWindowShouldClose(window))
	{
		/* Render here */
		glClear(GL_COLOR_BUFFER_BIT);

		glDrawArrays(GL_TRIANGLES, 0, 3);

		/* Swap front and back buffers */
		glfwSwapBuffers(window);

		/* Poll for and process events */
		glfwPollEvents();
	}

	glfwTerminate();
	return 0;
}
